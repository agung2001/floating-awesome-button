/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./assets/ts/metabox-location/metabox-location.ts":
/*!********************************************************!*\
  !*** ./assets/ts/metabox-location/metabox-location.ts ***!
  \********************************************************/
/***/ (function() {

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
/** Global Class  */
window.FAB_METABOX_LOCATION = __assign(__assign({}, window.FAB_METABOX_LOCATION), { 
    /**
     * Define Default Option
     * */
    defaultOptions: __assign(__assign({}, window.FAB_METABOX_LOCATION.defaultOptions), { select2: { placeholder: '--choose--' }, type: [], post_types: [] }), 
    /** Initiate Metabox Location */
    init: function () {
        /** Validate Data Before Form Submission */
        jQuery('#post').on('submit', function () {
            var invalidRule = window.FAB_METABOX_LOCATION.check_invalid_rules();
            /** Check Number of rules */
            var numberofRules = jQuery('#fab-location-rules .fab-location-rule-item').length;
            if (numberofRules == 1 && invalidRule) {
                var ruleItem = jQuery('#fab-location-rules .fab-location-rule-item').last();
                /** Rule Type */
                jQuery('.select2[name="fab_location_type[]', ruleItem).val('');
                jQuery('.select2[name="fab_location_type[]', ruleItem).trigger('change');
                /** Rule Operator */
                jQuery('.select2[name="fab_location_operator[]', ruleItem).val('');
                jQuery('.select2[name="fab_location_operator[]', ruleItem).trigger('change');
                /** Rule Value */
                jQuery('.select2[name="fab_location_value[]', ruleItem).val('');
                jQuery('.select2[name="fab_location_value[]', ruleItem).trigger('change');
                /** Rule Logic */
                jQuery('.select2[name="fab_location_logic[]', ruleItem).val('');
                jQuery('.select2[name="fab_location_logic[]', ruleItem).trigger('change');
                return true;
            }
            /** Inform User for invalid location rules */
            if (invalidRule) {
                jQuery.dialog({
                    icon: 'fas fa-times',
                    closeIcon: true,
                    animation: 'scale',
                    columnClass: 'j-small',
                    title: 'Error',
                    content: 'Please check input, there are invalid location rules!'
                });
            }
            return !invalidRule;
        });
    }, 
    /** Initialize Type Options */
    init_type_options: function () {
        /** Transform Value */
        var post_types = window.FAB_METABOX_LOCATION.post_types;
        post_types = Object.keys(post_types).sort().map(function (k, i) {
            return { id: k, text: post_types[k].label };
        });
        post_types = post_types.filter(function (k, i) {
            return (window.FAB_METABOX_LOCATION.excludes_post_types.includes(k.id)) ? false : true;
        });
        var post_taxonomies = window.FAB_METABOX_LOCATION.post_taxonomies;
        post_taxonomies = Object.keys(post_taxonomies).sort().map(function (k, i) {
            return { id: k, text: post_taxonomies[k].labels.name };
        });
        /** Assign Values */
        window.FAB_METABOX_LOCATION.defaultOptions.post_types = post_types;
        window.FAB_METABOX_LOCATION.defaultOptions.type = __spreadArray(__spreadArray([], window.FAB_METABOX_LOCATION.defaultOptions.type, true), [
            {
                text: "Post",
                children: __spreadArray([
                    { id: "post_type", text: "Post Type" }
                ], post_types.map(function (k, i) {
                    var text = k.text.substr(k.text.length - 1);
                    text = (text === 's') ? k.text.substring(0, k.text.length - 1) : k.text;
                    return { id: "single_".concat(k.id), text: "Single ".concat(text) };
                }), true)
            },
            {
                text: "Taxonomy",
                children: __spreadArray([], post_taxonomies.map(function (k, i) {
                    return { id: "taxonomy_".concat(k.id), text: "".concat(k.text, " (").concat(k.id, ")") };
                }), true)
            },
            {
                text: 'User',
                children: [
                    { id: "user_session", text: "Session" },
                    { id: "user_role", text: "Role" },
                ]
            }
        ], false);
    }, 
    /**
     * Check invalid rules before form submission
     * */
    check_invalid_rules: function () {
        var invalidRule = false;
        jQuery('#fab-location-rules .fab-location-rule-item').each(function () {
            var rule;
            /** Rule Type */
            rule = jQuery('.select2[name="fab_location_type[]', this);
            if (!rule.val()) {
                invalidRule = true;
                return false;
            }
            /** Rule Operator */
            rule = jQuery('.select2[name="fab_location_operator[]', this);
            if (!rule.val()) {
                invalidRule = true;
                return false;
            }
            /** Rule Value */
            rule = jQuery('.select2[name="fab_location_value[]', this);
            if (!rule.val()) {
                invalidRule = true;
                return false;
            }
            /** Rule Logic */
            rule = jQuery('.select2[name="fab_location_logic[]', this);
            if (!rule.val()) {
                invalidRule = true;
                return false;
            }
        });
        return invalidRule;
    }, 
    /** Reload Select2 */
    reloadSelect2: function (DOM, option) {
        if (!option.selectedValue)
            option.selectedValue = DOM.val();
        if (DOM.data('select2')) {
            DOM.select2('destroy');
            DOM.html('');
        }
        DOM.select2(option);
        DOM.val(option.selectedValue);
        DOM.trigger('change');
    }, 
    /**
     * Get type comparator by type, for select2 option
     * */
    getComparatorOption: function (typeValue, option) {
        /** if type is post_type */
        if (typeValue !== undefined && typeValue) {
            if (typeValue === 'post_type') { /** Post Type */
                option.data = window.FAB_METABOX_LOCATION.defaultOptions.post_types;
            }
            else if (typeValue.includes('taxonomy_')) { /** Single Page */
                option.ajax = window.FAB_METABOX_LOCATION.getComparatorOptionTaxonomyTermAjax(typeValue);
            }
            else if (typeValue === 'user_session') { /** User Session */
                option.data = [{ id: 'user_session_logged_in', text: 'Logged In' }];
            }
            else if (typeValue === 'user_role') { /** User Session */
                option.data = window.FAB_METABOX_LOCATION.defaultOptions.user.roles;
            }
            else if (typeValue.includes('single_')) { /** Single Page */
                option.ajax = window.FAB_METABOX_LOCATION.getComparatorOptionSingleAjax(typeValue);
            }
        }
        return option;
    }, 
    /**
     * Get comparator by type, for select2 option (Ajax)
     * */
    getComparatorOptionSingleAjax: function (typeValue) {
        return {
            delay: 500,
            dataType: "json",
            url: function (params) {
                typeValue = typeValue.replace('single_', '');
                var restBase = window.FAB_METABOX_LOCATION.post_types[typeValue].rest_base;
                restBase = (restBase) ? restBase : typeValue;
                restBase += (window.FAB_PLUGIN.isNumeric(params.term)) ? "/".concat(params.term) : '';
                return "".concat(window.FAB_METABOX_LOCATION.rest_url, "wp/v2/").concat(restBase);
            },
            data: function (params) {
                var data = { _fields: 'id,title' };
                /** Normal Search */
                if (!window.FAB_PLUGIN.isNumeric(params.term)) {
                    data = __assign(__assign({}, data), { filter: { post_status: 'publish,private' }, page: params.page || 1, search: params.term, orderby: 'title', order: 'asc' });
                }
                /** Save Params */
                window.FAB_METABOX_LOCATION.ajax_params = data;
                return data;
            },
            processResults: function (data) {
                /** Handle Pagination */
                var pagination = { more: false };
                if (window.FAB_METABOX_LOCATION.ajax_params.page <
                    this._request.getResponseHeader('X-WP-TotalPages'))
                    pagination.more = true;
                /** Grab Data */
                if (!Array.isArray(data))
                    data = [data];
                data = data.map(function (v, i) {
                    return { id: v.id, text: v.title.rendered.replace(/[^\w\s]/gi, '') };
                });
                return { results: data, pagination: pagination };
            }
        };
    }, 
    /**
     * Get comparator by type, for select2 option (Ajax)
     * */
    getComparatorOptionTaxonomyTermAjax: function (typeValue) {
        return {
            delay: 500,
            dataType: "json",
            url: function (params) {
                typeValue = typeValue.replace('taxonomy_', '');
                var restBase = window.FAB_METABOX_LOCATION.post_taxonomies[typeValue].rest_base;
                restBase = (restBase) ? restBase : typeValue;
                restBase += (window.FAB_PLUGIN.isNumeric(params.term)) ? "/".concat(params.term) : '';
                return "".concat(window.FAB_METABOX_LOCATION.rest_url, "wp/v2/").concat(restBase);
            },
            data: function (params) {
                var data = {};
                /** Normal Search */
                if (!window.FAB_PLUGIN.isNumeric(params.term)) {
                    data = {
                        page: params.page || 1,
                        per_page: 10,
                        search: params.term
                    };
                }
                /** Save Params */
                window.FAB_METABOX_LOCATION.ajax_params = data;
                return data;
            },
            processResults: function (data) {
                /** Handle Pagination */
                var pagination = { more: false };
                if (window.FAB_METABOX_LOCATION.ajax_params.page <
                    this._request.getResponseHeader('X-WP-TotalPages'))
                    pagination.more = true;
                /** Grab Data */
                data = data.map(function (v, i) {
                    return { id: v.id, text: v.name.replace(/[^\w\s]/gi, '') };
                });
                return { results: data, pagination: pagination };
            }
        };
    } });


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./assets/ts/metabox-location/metabox-location.ts"]();
/******/ 	
/******/ })()
;
//# sourceMappingURL=metabox-location.min.js.map