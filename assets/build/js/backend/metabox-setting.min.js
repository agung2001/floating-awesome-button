/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./assets/ts/metabox-setting/metabox-setting.ts":
/*!******************************************************!*\
  !*** ./assets/ts/metabox-setting/metabox-setting.ts ***!
  \******************************************************/
/***/ (function() {

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
/** Global Class  */
window.FAB_METABOX_SETTING = __assign(__assign({}, window.FAB_METABOX_SETTING), { 
    /**
     * Define Default Option
     * */
    defaultOptions: __assign(__assign({}, window.FAB_METABOX_SETTING.defaultOptions), { select2: { placeholder: '--choose--' } }), 
    /** Init */
    init: function () {
        /** Initiate Select2 */
        jQuery('.fab-container.metabox-settings .select2').select2();
        window.FAB_METABOX_SETTING.initTypeOptions();
        window.FAB_METABOX_SETTING.initHotkeyOptions();
        /** Trigger */
        setTimeout(function () {
            jQuery('#field_fab_setting_type').on('change.select2', window.FAB_METABOX_SETTING.triggerTypeChange);
        }, 100);
    }, 
    /**
     * Init select2 type
     * */
    initTypeOptions: function () {
        var dom = jQuery('#field_fab_setting_type');
        if (dom) {
            var options = [];
            if (dom.data('select2'))
                dom.select2('destroy');
            /** Map Types */
            options = options.concat(window.FAB_METABOX_SETTING.defaultOptions.types);
            /** Init jQuery Select2 */
            dom.select2({ placeholder: '--choose--', data: options });
            if (dom.data('selected')) {
                dom.val(dom.data('selected'));
                dom.trigger('change');
            }
        }
    }, 
    /**
     * Init select2 hotkey
     * */
    initHotkeyOptions: function () {
        var dom = jQuery('#field_fab_setting_hotkey');
        if (dom) {
            var options_1 = [{ id: 'none', text: 'None' }];
            if (dom.data('select2'))
                dom.select2('destroy');
            /** Map Function Key */
            for (var i = 1; i <= 12; i++) {
                options_1.push({ id: "f".concat(i), text: "F".concat(i) });
            }
            for (var i = 1; i <= 12; i++) {
                options_1.push({ id: "shift+f".concat(i), text: "Shift+F".concat(i) });
            }
            for (var i = 1; i <= 12; i++) {
                options_1.push({ id: "alt+f".concat(i), text: "Alt+F".concat(i) });
            }
            /** Map Special Key */
            var specialKey = ['esc', 'tab', 'space', 'return', 'backspace', 'insert', 'home', 'del', 'end', 'pageup', 'pagedown', 'left', 'up', 'right', 'down'];
            specialKey.forEach(function (i) { options_1.push({ id: "ctrl+".concat(i), text: "Ctrl+".concat(i) }); });
            specialKey.forEach(function (i) { options_1.push({ id: "shift+".concat(i), text: "Shift+".concat(i) }); });
            specialKey.forEach(function (i) { options_1.push({ id: "alt+".concat(i), text: "Alt+".concat(i) }); });
            /** Map CTRL, Shift, Alt Alphabetically */
            for (var i = 65; i <= 90; i++) {
                options_1.push({ id: "ctrl+".concat(String.fromCharCode(i)), text: "Ctrl+".concat(String.fromCharCode(i)) });
            }
            for (var i = 65; i <= 90; i++) {
                options_1.push({ id: "shift+".concat(String.fromCharCode(i)), text: "Shift+".concat(String.fromCharCode(i)) });
            }
            for (var i = 65; i <= 90; i++) {
                options_1.push({ id: "alt+".concat(String.fromCharCode(i)), text: "Alt+".concat(String.fromCharCode(i)) });
            }
            /** Init jQuery Select2 */
            dom.select2({ placeholder: '--choose--', data: options_1 });
            if (dom.data('selected')) {
                dom.val(dom.data('selected'));
                dom.trigger('change');
            }
        }
    }, 
    /** Setting Type Event Change
     * Hide open in new window if type is not link
     */
    triggerTypeChange: function (el) {
        window.FAB_METABOX_SETTING.data.fab.type = el.target.value;
        jQuery('#fab_setting_type_update').click();
    } });


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./assets/ts/metabox-setting/metabox-setting.ts"]();
/******/ 	
/******/ })()
;
//# sourceMappingURL=metabox-setting.min.js.map